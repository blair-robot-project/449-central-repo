import edu.wpi.first.gradlerio.GradleRIOPlugin

plugins {
    id 'java'
    id 'idea'
    id 'maven'
    id 'org.hidetake.ssh' version "2.9.0"
    id "edu.wpi.first.GradleRIO" version "2020.2.2"
    id "com.google.protobuf" version "0.8.8"
}

def ROBOT_MAIN_CLASS = "org.usfirst.frc.team449.robot.Main"

repositories {
    mavenCentral()
    maven { url 'http://www.revrobotics.com/content/sw/max/sdk/maven/' }
    maven { url "https://plugins.gradle.org/m2/" }
    maven { url 'https://jitpack.io' }
    //Not sure if I should keep this one
    maven {
        name = "GradleRio"
        url = "http://dev.imjac.in/maven"
    }
}

// Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
// Also defines JUnit 4.
dependencies {

    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.9.3'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-core
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.9.3'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-annotations
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.9.3'
    compile group: 'com.fasterxml.jackson.dataformat', name: 'jackson-dataformat-yaml', version: '2.9.3'
    //com.fasterxml.jackson.module:jackson-module-parameter-names:2.9.0.pr3
    compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: '2.9.3'
    compile 'org.jetbrains:annotations:15.0'
    compile 'com.google.protobuf:protobuf-java:2.6.1'
    compile 'io.grpc:grpc-stub:1.0.0-pre2'
    compile 'io.grpc:grpc-protobuf:1.0.0-pre2'
    // https://mvnrepository.com/artifact/org.zeromq/jeromq
    compile group: 'org.zeromq', name: 'jeromq', version: '0.4.3'
    compile 'com.github.Oblarg:Oblog:3.1.0'

    compile 'com.revrobotics.frc:SparkMax-java:1.4.1'

    implementation wpi.deps.wpilib()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.wpilibJni(wpi.platforms.desktop)


    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
    nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

    // In Java for now, the argument must be false
    simulation wpi.deps.sim.gui(wpi.platforms.desktop, false)

    testImplementation 'junit:junit:4.12'
}

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project EmbeddedTools.
deploy {
    targets {
        roboRIO("roborio") {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = frc.getTeamOrDefault(449)
        }
    }
    artifacts {
        frcJavaArtifact('frcJava') {
            targets << "roborio"
            // Debug can be overridden by command line, for use with VSCode
            debug = frc.getDebugOrDefault(false)
        }
        // Built in artifact to deploy arbitrary files to the roboRIO.
        fileTreeArtifact('frcStaticFileDeploy') {
            // The directory below is the local directory to deploy
            files = fileTree(dir: 'src/main/deploy')
            // Deploy to RoboRIO target, into /home/lvuser/deploy
            targets << "roborio"
            directory = '/home/lvuser/deploy'
        }
    }
}


/* Utils */

protobuf {
    generatedFilesBaseDir = "$projectDir/gen"
    protoc {
        // The artifact spec for the Protobuf Compiler
        artifact = 'com.google.protobuf:protoc:2.6.1'
    }
    plugins {
        // Optional: an artifact spec for a protoc plugin, with "grpc" as
        // the identifier, which can be referred to in the "plugins"
        // container of the "generateProtoTasks" closure.
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.0.0-pre2'
        }
    }
    generateProtoTasks {
        ofSourceSet('main')*.plugins {
            // Apply the "grpc" plugin whose spec is defined above, without
            // options.  Note the braces cannot be omitted, otherwise the
            // plugin will not be added. This is because of the implicit way
            // NamedDomainObjectContainer binds the methods.
            grpc {}
        }
    }
}

/* Utils */
clean {
    delete protobuf.generatedFilesBaseDir
}

idea {
    module {
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java")
    }
}

/* ssh stuff */
remotes {
    rio {
//        host = 'roboRIO-449-frc.local'  //Default, sometimes doesn't work
        host = '172.22.11.2' //USB B cable
//        host = '10.4.49.2' //Radio/ethernet IP
        user = 'lvuser'
        knownHosts = allowAnyHosts
    }

    jetson {
        host = '10.4.49.7'
        user = 'nvidia'
        knownHosts = allowAnyHosts
        password = 'nvidia'
    }
}

task('copyResources') {
    doLast {
        ssh.run {
            session(remotes.rio) {
                execute 'mkdir ~/449_resources', ignoreError: true
                execute 'mkdir ~/logs', ignoreError: true
                put from: fileTree('src/main/resources'), into: './449_resources/'
                execute ". /etc/profile.d/natinst-path.sh; /usr/local/frc/bin/frcKillRobot.sh -t -r", ignoreError: true
            }
        }
    }
}

task('startVision') {
    doLast {
        ssh.run {
            session(remotes.jetson) {
                execute './jetson_vision.sh', ignoreError: true
            }
        }
    }
}

// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

//task wrapper(type: Wrapper) {
//    gradleVersion = '6.0'
//}

//wrapper {
//    gradleVersion = '6.0'
//}

compileJava.options.compilerArgs.add '-parameters'

/*--------------Old stuff------------------*/


task sourcesJar(type: Jar, dependsOn: classes) {
    archiveClassifier.set('sources')
    from sourceSets.main.allSource
}

task genJavadoc(type: Jar, dependsOn: javadoc) {
    archiveClassifier.set('javadoc')
    from javadoc.destinationDir
}

task deleteDocs(type: Delete) {
    delete '../docs'
    followSymlinks = false
}

task copyDocs(type: Copy, dependsOn: [genJavadoc, deleteDocs]) {
    from 'build/docs/javadoc'
    into '../docs'
}

artifacts {
    archives sourcesJar
    archives genJavadoc
}